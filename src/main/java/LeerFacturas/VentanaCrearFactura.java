package LeerFacturas;


import static LeerFacturas.Facturas.obtenerValorCelda;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.*;
import java.text.DecimalFormat;
import java.time.LocalDate;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Practicas
 */
public class VentanaCrearFactura extends javax.swing.JFrame {
    //DECLARAS EL MODELO DE TABLA
    private DefaultTableModel model;
    //PERSONALIZAR VENTANA
    public void personalizar_JFrame() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setFont(new Font("Courier New", Font.PLAIN, 12));
        this.setTitle("CREAR Factura");
        this.setSize(770, 700);
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        // Cargar la imagen correctamente
        try {
            Image imagen = Toolkit.getDefaultToolkit().getImage("C:/Users/Practicas/Documents/NetBeansProjects/FacturasExcel/src/main/java/LeerFacturas/Logo.png");
            imagen = imagen.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
            this.setIconImage(imagen);

        } catch (Exception e) {
            System.out.println("Error: Imagen no encontrada");
        }
    }

    public VentanaCrearFactura() {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        personalizar_JFrame();
        initComponents();
        conseguirDatos();
        seleccionarArticulo();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LblNumeroFactura = new javax.swing.JLabel();
        TxtNumeroFactura = new javax.swing.JTextField();
        LblFechaEmision = new javax.swing.JLabel();
        TxtFechaEmision = new javax.swing.JTextField();
        LblCliente = new javax.swing.JLabel();
        LblNombre = new javax.swing.JLabel();
        LblCif = new javax.swing.JLabel();
        TxtCif = new javax.swing.JTextField();
        LblTelefono = new javax.swing.JLabel();
        TxtTelefono = new javax.swing.JTextField();
        LblDireccion = new javax.swing.JLabel();
        TxtDireccion = new javax.swing.JTextField();
        LblPoblacion = new javax.swing.JLabel();
        TxtPoblacion = new javax.swing.JTextField();
        LblProvincia = new javax.swing.JLabel();
        TxtNombre = new javax.swing.JTextField();
        TxtProvincia = new javax.swing.JTextField();
        LblCodigoPostal = new javax.swing.JLabel();
        TxtCodigoPostal = new javax.swing.JTextField();
        LblEmail = new javax.swing.JLabel();
        LblFormaPago = new javax.swing.JLabel();
        TxtFormaPago = new javax.swing.JTextField();
        LblCuenta = new javax.swing.JLabel();
        TxtNumeroCuenta = new javax.swing.JTextField();
        LblTotal = new javax.swing.JLabel();
        TxtTotal = new javax.swing.JTextField();
        BtnArticulos = new javax.swing.JButton();
        TxtEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblConceptoImporte = new javax.swing.JTable();
        TxtConcepto = new javax.swing.JTextField();
        TxtImporte = new javax.swing.JTextField();
        lblImporte = new javax.swing.JLabel();
        lblConcepto = new javax.swing.JLabel();
        BtnBorrarArticulos = new javax.swing.JButton();
        BtnModificarArticulos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BtnVolver = new javax.swing.JButton();
        CmdCrearFactura = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LblNumeroFactura.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblNumeroFactura.setText("Nº DE FACTURA*");
        LblNumeroFactura.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtNumeroFactura.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtNumeroFactura.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtNumeroFactura.setPreferredSize(null);
        TxtNumeroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtNumeroFacturaActionPerformed(evt);
            }
        });

        LblFechaEmision.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblFechaEmision.setText("FECHA DE EMISIÓN");
        LblFechaEmision.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LblFechaEmision.setPreferredSize(null);

        TxtFechaEmision.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtFechaEmision.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtFechaEmision.setEnabled(false);
        TxtFechaEmision.setPreferredSize(null);
        TxtFechaEmision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtFechaEmisionActionPerformed(evt);
            }
        });

        LblCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblCliente.setText("CLIENTE");
        LblCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LblCliente.setPreferredSize(null);

        LblNombre.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblNombre.setText("NOMBRE *");
        LblNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        LblCif.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblCif.setText("CIF *");
        LblCif.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtCif.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtCif.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtCif.setPreferredSize(null);

        LblTelefono.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblTelefono.setText("TELÉFONO *");
        LblTelefono.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtTelefono.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtTelefono.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtTelefono.setPreferredSize(null);

        LblDireccion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblDireccion.setText("DIRECCIÓN *");
        LblDireccion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtDireccion.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtDireccion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtDireccion.setPreferredSize(null);

        LblPoblacion.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblPoblacion.setText("POBLACIÓN *");
        LblPoblacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtPoblacion.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtPoblacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TxtPoblacion.setPreferredSize(null);
        TxtPoblacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtPoblacionActionPerformed(evt);
            }
        });

        LblProvincia.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblProvincia.setText("PROVINCIA *");
        LblProvincia.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TxtNombre.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtNombreActionPerformed(evt);
            }
        });

        TxtProvincia.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        LblCodigoPostal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblCodigoPostal.setText("CODIGO POSTAL *");

        TxtCodigoPostal.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtCodigoPostal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCodigoPostalActionPerformed(evt);
            }
        });

        LblEmail.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LblEmail.setText("EMAIL");

        LblFormaPago.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblFormaPago.setText("FORMA DE PAGO *");

        TxtFormaPago.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        LblCuenta.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblCuenta.setText("Nº DE CUENTA * ");

        TxtNumeroCuenta.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        LblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblTotal.setText("TOTAL");

        TxtTotal.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TxtTotal.setEnabled(false);

        BtnArticulos.setText("AÑADIR ARTÍCULO ");
        BtnArticulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnArticulosActionPerformed(evt);
            }
        });

        TxtEmail.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        TblConceptoImporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "CONCEPTO", "IMPORTE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TblConceptoImporte);

        TxtConcepto.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        TxtImporte.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        lblImporte.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImporte.setText("IMPORTE  NUEVO");

        lblConcepto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConcepto.setText("CONCEPTO NUEVO");

        BtnBorrarArticulos.setText("BORRAR ARTÍCULO ");
        BtnBorrarArticulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBorrarArticulosActionPerformed(evt);
            }
        });

        BtnModificarArticulos.setText("MODIFICAR ARTÍCULO ");
        BtnModificarArticulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnModificarArticulosActionPerformed(evt);
            }
        });

        jLabel1.setText("SE MARCAN CON * LOS CAMPOS OBLIGATORIOS");

        BtnVolver.setText("<<<");
        BtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVolverActionPerformed(evt);
            }
        });

        CmdCrearFactura.setText("CREAR FACTURA");
        CmdCrearFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdCrearFacturaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LblFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TxtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TxtConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LblCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TxtNumeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(91, 91, 91)
                                .addComponent(LblNumeroFactura))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(LblDireccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LblNombre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LblCif, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(LblPoblacion, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(TxtPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TxtCif, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TxtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                            .addComponent(TxtDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(1, 1, 1)
                                .addComponent(LblCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BtnArticulos)
                                .addGap(18, 18, 18)
                                .addComponent(BtnModificarArticulos)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(BtnBorrarArticulos)
                                        .addGap(18, 18, 18)
                                        .addComponent(CmdCrearFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(TxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblImporte)
                                        .addGap(18, 18, 18)
                                        .addComponent(TxtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LblFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(TxtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(TxtNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(LblTelefono, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(LblProvincia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TxtCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TxtProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TxtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(LblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(LblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblCif, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtCif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(LblPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LblProvincia)
                        .addComponent(TxtProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TxtPoblacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtCodigoPostal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblConcepto)
                    .addComponent(lblImporte)
                    .addComponent(TxtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblTotal)
                    .addComponent(TxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtNumeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnBorrarArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnModificarArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CmdCrearFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TxtFechaEmisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtFechaEmisionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtFechaEmisionActionPerformed

    private void TxtPoblacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtPoblacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtPoblacionActionPerformed

    private void TxtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtNombreActionPerformed

    private void TxtCodigoPostalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCodigoPostalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCodigoPostalActionPerformed
    //MÉTODO QUE SIRVE PARA  CONSEGUIR DATOS DE CADA CAJA (FECHA QUE LA MODIFICAREMOS Y SEPARAREMOS EN DIA MES Y AÑO)(TOTAL QUE NOS ASEGURAREMOS QUE ES UN DOBLE)
    // Y LA TABLA DE LA QUE SACAREMOS UN CONCEPTO Y IMPORTE POR CADA ARTICULO; POR ÚLTIMO EL TOTAL QUE ES EL SUME DE LOS IMPORTE
    private void conseguirDatos() {
        LocalDate fechaActual = LocalDate.now();
        int dia = fechaActual.getDayOfMonth();
        int mes = fechaActual.getMonthValue();
        int anio = fechaActual.getYear();
        String fecha = String.format("%02d/%02d/%d", dia, mes, anio);
        TxtFechaEmision.setText(fecha);
        TxtTotal.setText("0.00" + "€");
        model = (DefaultTableModel) TblConceptoImporte.getModel();
        model.setRowCount(0);
    }

    //ESTA FUNCIÓN SE UTILIZA PARA FORMATEAR EL TOTAL SEGÚN LOS IMPORTES, PARA TENERLO SIEMPRE ACTUALIZADO
    private void actualizarTotal() {      
        double total = 0.0;
        model = (DefaultTableModel) TblConceptoImporte.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Object articuloImporte = model.getValueAt(i, 1);
            if (articuloImporte instanceof Number) {
                Number number = (Number) articuloImporte;
                total += number.doubleValue();
            }
        }
        DecimalFormat formato = new DecimalFormat("#.00");
        String totalFormateado = formato.format(total);
        TxtTotal.setText(totalFormateado);
    }
    //CADA ARTICULO SE PUEDE SELECCIONAR DEPENDIENDO DE LO QUE SELECCIONES EN LA TABLA Y COMPRUEBAS QUE COMO MINIMO HAY UN ARTICULO Y UN IMPORTE SELECCIONADO
    private void seleccionarArticulo() {
        ListSelectionModel model = TblConceptoImporte.getSelectionModel();
        model.addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                int filaSeleccionada = TblConceptoImporte.getSelectedRow();
                if (filaSeleccionada != -1 && TblConceptoImporte.getValueAt(filaSeleccionada, 0) != null && TblConceptoImporte.getValueAt(filaSeleccionada, 1) != null) {
                    TxtConcepto.setText(TblConceptoImporte.getValueAt(filaSeleccionada, 0).toString());
                    TxtImporte.setText(TblConceptoImporte.getValueAt(filaSeleccionada, 1).toString());
                }
            }
        });
    }


    private void BtnArticulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnArticulosActionPerformed
        //PONES EN LA CAJAS CONCEPTO E IMPORTE Y ESTE BOTÓN  LO AÑADE A LA TABLA
        String concepto = TxtConcepto.getText();
        String importe = TxtImporte.getText();
        if (Validaciones.validarImporte(importe) == true) {
            DefaultTableModel model = (DefaultTableModel) TblConceptoImporte.getModel();
            Double importeDouble = Double.valueOf(importe);
            Object[] fila = {concepto, importeDouble};
            model.addRow(fila);
            actualizarTotal();
            JOptionPane.showMessageDialog(this, "Articulo INSERTADO en la tabla", "OK", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error al insertar Articulo en la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnArticulosActionPerformed

    private void BtnBorrarArticulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBorrarArticulosActionPerformed
       //BORRA EL ARTICULO SELECCIONADO DE LA TABLA; E IMPIDE QUE SE QUEDE VACIA, COMO MINIMO TENDRÁ UN ARTICULO 
        model = (DefaultTableModel) TblConceptoImporte.getModel();
        int selectedIndex = TblConceptoImporte.getSelectedRow();

        // Verificar si hay más de una fila en la tabla
        if (model.getRowCount() > 1) {
            if (selectedIndex != -1 && TblConceptoImporte.getValueAt(selectedIndex, 0) != null && TblConceptoImporte.getValueAt(selectedIndex, 1) != null) {  // Si se ha seleccionado una fila válida
                model.removeRow(selectedIndex);  // Eliminar la fila seleccionada
                JOptionPane.showMessageDialog(this, "Artículo borrado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                TxtConcepto.setText("");
                TxtImporte.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Error al borrar artículo. No se ha seleccionado ningún artículo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No puedes borrar la última fila de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        actualizarTotal();
    }//GEN-LAST:event_BtnBorrarArticulosActionPerformed

    private void BtnModificarArticulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnModificarArticulosActionPerformed
        // Primero, obtener el índice de la fila seleccionada
        int selectedIndex = TblConceptoImporte.getSelectedRow();

        if (selectedIndex != -1 && TblConceptoImporte.getValueAt(selectedIndex, 0) != null && TblConceptoImporte.getValueAt(selectedIndex, 1) != null) {  // Verificar si hay una fila seleccionada
            // Obtener los valores desde los campos de texto
            String conceptoModificado = TxtConcepto.getText();  // Nuevo valor para el concepto
            String importeTexto = TxtImporte.getText();  // Obtener el valor del importe como texto

            // Verificar que el importe sea un número válido
            try {
                Double importeModificado = Double.valueOf(importeTexto);  // Convertir el texto a Double

                // Actualizar los valores en la tabla
                DefaultTableModel model = (DefaultTableModel) TblConceptoImporte.getModel();
                System.out.println(selectedIndex);
                model.setValueAt(conceptoModificado, selectedIndex, 0);  // Modificar la columna 0 (Concepto)
                model.setValueAt(importeModificado, selectedIndex, 1);  // Modificar la columna 1 (Importe)

                // Mostrar mensaje de éxito
                JOptionPane.showMessageDialog(this, "Artículo modificado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                actualizarTotal();
            } catch (NumberFormatException e) {
                // Si el importe no es un número válido
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un importe válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si no se seleccionó ninguna fila
            JOptionPane.showMessageDialog(this, "No se ha seleccionado un artículo para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BtnModificarArticulosActionPerformed

    private void BtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVolverActionPerformed
        //VUELVE A LA VENTANA DE SELECCION(SI QUIERES MODIFICAR FACTURA, INSERTAR FACTURA O ENVIAR FACTURA) DE GESTÓN
        VentanaSelecionarGestor ventana = new VentanaSelecionarGestor();
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BtnVolverActionPerformed

    private void CmdCrearFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdCrearFacturaActionPerformed
        //CREA LA FACTURA TENIENDO EN CUENTA CADA CAMPO OBLIGATORIO Y BIEN METIDO, CADA FACTURA SE GUARDARÁ CON UN NOMBRE NUEVO Y EN UNA UBICACIÓN DETERMINADA
        Connection conexion = ConexionFacturas.obtenerConexion();
        File inputFile = new File("C:\\Users\\Practicas\\Documents\\NetBeansProjects\\FacturasExcel\\src\\main\\java\\LeerFacturas\\FacturaVacia.xlsx");

        String numeroFactura = TxtNumeroFactura.getText();
        String fechaEmision = TxtFechaEmision.getText();
        String nombreCliente = TxtNombre.getText();
        String CIF = TxtCif.getText();
        String direccion = TxtDireccion.getText();
        String telefono = TxtTelefono.getText();
        String poblacion = TxtPoblacion.getText();
        String provincia = TxtProvincia.getText();
        String codigoPostal = TxtCodigoPostal.getText();
        String email = TxtEmail.getText();
        String formaPago = TxtFormaPago.getText();
        String cuenta = TxtNumeroCuenta.getText();
        String total = TxtTotal.getText();
        boolean telefonoValido = Validaciones.validarSoloDigitos(telefono);
        boolean numeroFacturaValido = Validaciones.validarNumeroFactura(numeroFactura);
        boolean Factura = Validaciones.buscarFacturaDuplicada(numeroFactura);
        if (!nombreCliente.equals("") && !CIF.equals("") && !direccion.equals("") && !telefono.equals("") && !poblacion.equals("") && !provincia.equals("") && !codigoPostal.equals("") && !formaPago.equals("") && !cuenta.equals("") && model.getRowCount() > 0) {
            if (numeroFacturaValido && telefonoValido) {
                if (!Factura) {

                    try {
                        String archivo = "C:\\Users\\Practicas\\Documents\\NetBeansProjects\\FacturasExcel\\src\\main\\java\\facturasGuardadas\\" + nombreCliente + ".xlsx";
                        File outputFile = new File(archivo);
                        FileInputStream fis = new FileInputStream(inputFile);
                        Workbook workbook = new XSSFWorkbook(fis);
                        Sheet sheet = workbook.getSheetAt(0);
                        Row row = sheet.getRow(2);
                        Cell cell = row.getCell(3);
                        cell.setCellValue(numeroFactura);
                        row = sheet.getRow(2);
                        cell = row.getCell(6);
                        cell.setCellValue(fechaEmision);
                        row = sheet.getRow(6);
                        cell = row.getCell(3);
                        cell.setCellValue(nombreCliente);
                        row = sheet.getRow(7);
                        cell = row.getCell(3);
                        cell.setCellValue(CIF);
                        row = sheet.getRow(7);
                        cell = row.getCell(5);
                        cell.setCellValue(telefono);
                        row = sheet.getRow(8);
                        cell = row.getCell(3);
                        cell.setCellValue(direccion);
                        row = sheet.getRow(9);
                        cell = row.getCell(3);
                        cell.setCellValue(poblacion);
                        row = sheet.getRow(9);
                        cell = row.getCell(5);
                        cell.setCellValue(provincia);
                        row = sheet.getRow(9);
                        cell = row.getCell(7);
                        cell.setCellValue(codigoPostal);
                        row = sheet.getRow(10);
                        cell = row.getCell(3);
                        cell.setCellValue(email);
                        for (int i = 0; i < model.getRowCount(); i++) {
                            String concepto = model.getValueAt(i, 0).toString();
                            String importe = model.getValueAt(i, 1).toString();

                            // Si estamos en la primera fila, la fila 13
                            if (i == 0) {
                                row = sheet.getRow(13);  // Fila 13
                                if (row == null) {
                                    row = sheet.createRow(13);  // Crear la fila si no existe
                                }

                                // Crear celdas para el concepto (columna 1)
                                cell = row.getCell(1);
                                if (cell == null) {
                                    cell = row.createCell(1);  // Crear la celda si no existe
                                }
                                cell.setCellValue(concepto);

                                // Crear celdas para el importe (columna 6)
                                cell = row.getCell(6);
                                if (cell == null) {
                                    cell = row.createCell(6);  // Crear la celda si no existe
                                }
                                String importeEuros = importe + " €";
                                cell.setCellValue(importeEuros);

                            } else {
                                // Desplazar las filas hacia abajo y crear una nueva fila
                                sheet.shiftRows(13 + i, sheet.getLastRowNum(), 1);  // Desplaza las filas hacia abajo
                                row = sheet.createRow(13 + i);  // Crea una nueva fila para cada iteración

                                // Combinar las celdas de concepto (columna 1 a 5) y de importe (columna 6 a 7)
                                sheet.addMergedRegion(new CellRangeAddress(13 + i, 13 + i, 1, 5));  // Combina columnas 1 a 5 para el concepto
                                sheet.addMergedRegion(new CellRangeAddress(13 + i, 13 + i, 6, 7));  // Combina columnas 6 a 7 para el importe

                                // Crear un estilo de celda (border, negrita, centrado)
                                CellStyle cellStyle = workbook.createCellStyle();

                                // Definir borde
                                cellStyle.setBorderBottom(BorderStyle.THIN);
                                cellStyle.setBorderLeft(BorderStyle.THIN);
                                cellStyle.setBorderRight(BorderStyle.THIN);

                                // Centrado del texto
                                cellStyle.setAlignment(HorizontalAlignment.CENTER);
                                cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);

                                // Estilo en negrita
                                org.apache.poi.ss.usermodel.Font font = workbook.createFont();
                                font.setBold(true);  // Establece el texto en negrita

                                // Configurar la tipografía Arial y el tamaño 9
                                font.setFontName("Arial");
                                font.setFontHeightInPoints((short) 9);  // Establecer el tamaño de fuente a 9

                                cellStyle.setFont(font);

                                // Crear celdas para el concepto (columna 1 a 5) y aplicar estilo
                                for (int j = 1; j <= 5; j++) {
                                    cell = row.createCell(j);
                                    cell.setCellValue(concepto);
                                    cell.setCellStyle(cellStyle);  // Aplicar el estilo
                                }

                                // Crear celdas para el importe (columna 6 a 7) y aplicar estilo
                                for (int j = 6; j <= 7; j++) {
                                    cell = row.createCell(j);
                                    String importeEuros = importe + " €";
                                    cell.setCellValue(importeEuros);
                                    cell.setCellStyle(cellStyle);  // Aplicar el estilo
                                }
                            }
                        }

                        int filaPosicion = 12;  // Filas desde las que comenzamos
                        int columnaFormaPago = 1;  // Columna de la "Forma de pago" 
                        int columnaTotal = 6;  // Columna del "Total"
                        String formaPago2 = "";
                        String cuenta2;
                        // Buscar "Forma de pago"
                        while (filaPosicion < sheet.getPhysicalNumberOfRows()) {
                            row = sheet.getRow(filaPosicion);
                            if (row != null) {
                                // Leer la celda en la columna de forma de pago
                                cell = row.getCell(columnaFormaPago);
                                formaPago2 = (cell != null) ? obtenerValorCelda(cell) : "";

                                // Imprimir para depuración
                                System.out.println("Fila " + filaPosicion + ", Forma de pago: " + formaPago2);

                                // Verificar si encontramos "Forma de pago"
                                if (formaPago2.contains("Forma de pago:")) {
                                    break;
                                }
                            }
                            filaPosicion++;
                        }

                        // Si encontramos "Forma de pago", obtener el valor correspondiente
                        if (!formaPago2.isEmpty() && formaPago2.contains("Forma de pago:")) {
                            row = sheet.getRow(filaPosicion);
                            cell = row.getCell(columnaFormaPago);  // Suponiendo que el valor está en la celda siguiente
                            formaPago2 = (cell != null) ? obtenerValorCelda(cell) : "";
                            String formaPagoTotal = formaPago2 + " " + formaPago;
                            cell.setCellValue(formaPagoTotal);
                            System.out.println("Forma de pago encontrada: " + formaPagoTotal);
                        }

                        // Obtener cuenta bancaria
                        row = sheet.getRow(filaPosicion + 1);
                        cell = row.getCell(columnaFormaPago);  // Celda donde esperas encontrar la cuenta
                        cuenta2 = (cell != null) ? obtenerValorCelda(cell) : "";

                        // Depuración para cuenta
                        System.out.println("Cuenta bancaria: " + cuenta2);

                        // Si no contiene dígitos, busca la siguiente celda
                        row = sheet.getRow(filaPosicion + 1);
                        cell = row.getCell(columnaFormaPago + 1);  // Celda siguiente
                        cell.setCellValue(cuenta);
                        System.out.println("Cuenta bancaria: " + cuenta);

                        // Buscar el totaL
                        String total2;
                        filaPosicion--;  // Retroceder una fila para buscar el total
                        row = sheet.getRow(filaPosicion);
                        cell = row.getCell(columnaTotal - 1);  // Celda donde debería estar el total
                        total2 = (cell != null) ? obtenerValorCelda(cell) : "";

                        // Depuración para total
                        System.out.println("Total encontrado: " + total);

                        while (filaPosicion < sheet.getPhysicalNumberOfRows()) {  // Asegurarse de no exceder el número de filas
                            row = sheet.getRow(filaPosicion);
                            if (row != null) {
                                cell = row.getCell(columnaTotal - 1);
                                total2 = (cell != null) ? obtenerValorCelda(cell) : "";
                                // Si la celda está vacía, seguimos buscando
                                if (total2.equals("TOTAL")) {
                                    break;  // Solo avanzamos si la celda está vacía
                                }
                            } else {
                                // Si la fila es null, seguimos al siguiente
                            }
                            filaPosicion++;
                        }

                        System.out.println("Total encontrado: " + total2);
                        if (total2 != null && total2.equals("TOTAL")) {
                            row = sheet.getRow(filaPosicion);
                            if (row != null) {
                                cell = row.getCell(columnaTotal);  // Celda siguiente al "TOTAL"
                                String totalEuros = total + " €";
                                cell.setCellValue(totalEuros);
                            }
                        }

                        System.out.println("Total final: " + total);
                        String firma = "";
                        while (filaPosicion < sheet.getPhysicalNumberOfRows()) {
                            row = sheet.getRow(filaPosicion);
                            if (row != null) {
                                // Leer la celda en la columna de forma de pago
                                cell = row.getCell(columnaFormaPago);
                                firma = (cell != null) ? obtenerValorCelda(cell) : "";

                                // Imprimir para depuración
                                System.out.println("Fila " + filaPosicion + ", Firma: " + firma);

                                // Verificar si encontramos "Forma de pago"
                                if (firma.contains("FIRMA")) {
                                    break;
                                }

                            }
                            filaPosicion++;

                        }
                        System.out.println("Fila " + filaPosicion + ", Firma: " + firma);
                        //INSERTAR IMAGEN EN LA FACTURA EN LA POSICICION DE LA CELDA FIRMA + 1
                        // Si encontramos la celda de la firma, insertar la imagen en la fila siguiente
                        try {
                            int firmaPosicion = filaPosicion + 1; // Posición después de la celda "FIRMA"
                            int columnaFirma = 1; // Columna donde se coloca la imagen

                            // Ruta de la imagen
                            File imagenFile = new File("C:\\Users\\Practicas\\Documents\\NetBeansProjects\\FacturasExcel\\src\\main\\java\\LeerFacturas\\firmaCefora.png");
                            FileInputStream imageInputStream = new FileInputStream(imagenFile);
                            byte[] imageBytes = IOUtils.toByteArray(imageInputStream);
                            imageInputStream.close();

                            // Insertar la imagen en el libro de Excel
                            int pictureIdx = workbook.addPicture(imageBytes, Workbook.PICTURE_TYPE_PNG);
                            CreationHelper helper = workbook.getCreationHelper();
                            Drawing<?> drawing = sheet.createDrawingPatriarch();
                            ClientAnchor anchor = helper.createClientAnchor();

                            // Definir la posición de la imagen
                            anchor.setCol1(columnaFirma); // Columna donde se coloca la imagen
                            anchor.setRow1(firmaPosicion); // Fila donde se coloca
                            anchor.setCol2(columnaFirma + 2); // Define el ancho ocupando 2 columnas
                            anchor.setRow2(firmaPosicion + 5); // Define la altura ocupando 5 filas

                            // Insertar la imagen y ajustar tamaño
                            Picture picture = drawing.createPicture(anchor, pictureIdx);
                            picture.resize(); // Ajusta la imagen automáticamente

                        } catch (IOException ex) {
                            System.out.println("NO SE INSERTO LA IMAGEN: " + ex);
                        }
                        int contador = 1;
                        while (outputFile.exists()) {
                            archivo = "C:\\Users\\Practicas\\Documents\\NetBeansProjects\\FacturasExcel\\src\\main\\java\\facturasGuardadas\\" + nombreCliente + " " + contador + ".xlsx";
                            outputFile = new File(archivo);
                            contador++;
                        }
                        // ✅ Guardar el archivo correctamente DESPUÉS de insertar la imagen
                        try (FileOutputStream fos = new FileOutputStream(outputFile)) {
                            workbook.write(fos);

                            JOptionPane.showMessageDialog(this, "Factura generada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                            Facturas.guardarDatos(archivo);
                            
                        } catch (IOException e) {
                            System.out.println("Error al guardar el archivo: " + e);
                        }

                    } catch (IOException e) {
                        System.out.println(e);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "FACTURA YA EXISTE", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Por favor, INGRESE TODOS LOS CAMPOS OBLIGATORIOS.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, INGRESE UN NÚMERO DE TELÉFONO Y FACTURA VÁLIDO.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_CmdCrearFacturaActionPerformed

    private void TxtNumeroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtNumeroFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtNumeroFacturaActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaExcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaExcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaExcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaExcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaCrearFactura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnArticulos;
    private javax.swing.JButton BtnBorrarArticulos;
    private javax.swing.JButton BtnModificarArticulos;
    private javax.swing.JButton BtnVolver;
    private javax.swing.JButton CmdCrearFactura;
    private javax.swing.JLabel LblCif;
    private javax.swing.JLabel LblCliente;
    private javax.swing.JLabel LblCodigoPostal;
    private javax.swing.JLabel LblCuenta;
    private javax.swing.JLabel LblDireccion;
    private javax.swing.JLabel LblEmail;
    private javax.swing.JLabel LblFechaEmision;
    private javax.swing.JLabel LblFormaPago;
    private javax.swing.JLabel LblNombre;
    private javax.swing.JLabel LblNumeroFactura;
    private javax.swing.JLabel LblPoblacion;
    private javax.swing.JLabel LblProvincia;
    private javax.swing.JLabel LblTelefono;
    private javax.swing.JLabel LblTotal;
    private javax.swing.JTable TblConceptoImporte;
    private javax.swing.JTextField TxtCif;
    private javax.swing.JTextField TxtCodigoPostal;
    private javax.swing.JTextField TxtConcepto;
    private javax.swing.JTextField TxtDireccion;
    private javax.swing.JTextField TxtEmail;
    private javax.swing.JTextField TxtFechaEmision;
    private javax.swing.JTextField TxtFormaPago;
    private javax.swing.JTextField TxtImporte;
    private javax.swing.JTextField TxtNombre;
    private javax.swing.JTextField TxtNumeroCuenta;
    private javax.swing.JTextField TxtNumeroFactura;
    private javax.swing.JTextField TxtPoblacion;
    private javax.swing.JTextField TxtProvincia;
    private javax.swing.JTextField TxtTelefono;
    private javax.swing.JTextField TxtTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblConcepto;
    private javax.swing.JLabel lblImporte;
    // End of variables declaration//GEN-END:variables
}
