package LeerFacturas;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
//ESTA VENTANA HACE TODO EL PROCESO CRUD(CREATE, LEER, ACTUALIZAR Y BORRAR)EN CUANTO AL LOGIN QUE ES NUESTRA VENTANA DE INICIO
public class VentanaCRUDLogin extends javax.swing.JFrame {
    //CONEXIÓN
    Connection conexion = LeerFacturas.ConexionFacturas.obtenerConexion();
    //LOS LOGÍNs(Usuarios...)LOS GUARDAREMOS EN UN ARRAY Y EVITAREMOS QUE LOS NOMBRES SE REPITAN
    private ArrayList<String> loginArray = new ArrayList<>();
    //GUARDAREMOS EL LOGIN DE FORMA DETERMINANTE PARA SABER CUAL ES EL ORIGINAL
    private String loginOriginal;
    //PERSONALIZAREMOS VENTANA
    public void personalizar_JFrame() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setFont(new Font("Courier New", Font.PLAIN, 12));
        this.setTitle("Ventana Administrador");
        this.setSize(750, 415);
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        // Cargar la imagen correctamente
        try {
            Image imagen = Toolkit.getDefaultToolkit().getImage("C:/Users/Practicas/Documents/NetBeansProjects/FacturasExcel/src/main/java/LeerFacturas/Logo.png");
            imagen = imagen.getScaledInstance(500, 500, Image.SCALE_SMOOTH);
            this.setIconImage(imagen);

        } catch (Exception e) {
            System.out.println("Error: Imagen no encontrada");
        }
    }

    public VentanaCRUDLogin() {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        initComponents();
        actualizarTabla(conexion);
        seleccionarLogin();
        personalizar_JFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LblContraseña = new javax.swing.JLabel();
        LblLogin1 = new javax.swing.JLabel();
        TxtLogin = new javax.swing.JTextField();
        TxtClave = new javax.swing.JTextField();
        CboRol = new javax.swing.JComboBox<>();
        CmdCrear = new javax.swing.JButton();
        CmdNuevo = new javax.swing.JButton();
        CmdBorrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableLogin = new javax.swing.JTable();
        CmdModificar = new javax.swing.JButton();
        BtnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 400));

        LblContraseña.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LblContraseña.setText("ESCRIBE TU CONTRASEÑA");

        LblLogin1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LblLogin1.setText("ESCRIBE TU LOGIN");

        TxtLogin.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        TxtClave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        CboRol.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CboRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Gestion" }));

        CmdCrear.setText("CREAR");
        CmdCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdCrearActionPerformed(evt);
            }
        });

        CmdNuevo.setText("NUEVO");
        CmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdNuevoActionPerformed(evt);
            }
        });

        CmdBorrar.setText("BORRAR");
        CmdBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdBorrarActionPerformed(evt);
            }
        });

        TableLogin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Login", "Clave", "Rol"
            }
        ));
        jScrollPane1.setViewportView(TableLogin);

        CmdModificar.setText("MODIFICAR");
        CmdModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdModificarActionPerformed(evt);
            }
        });

        BtnVolver.setText("<< VOLVER A LOGIN");
        BtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CmdCrear, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(CmdNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(CmdModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(CmdBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(CboRol, javax.swing.GroupLayout.Alignment.LEADING, 0, 212, Short.MAX_VALUE)
                                .addComponent(TxtClave, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(BtnVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TxtLogin))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LblContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LblLogin1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(BtnVolver)
                        .addGap(24, 24, 24)
                        .addComponent(LblLogin1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(LblContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(CboRol, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CmdCrear)
                    .addComponent(CmdNuevo)
                    .addComponent(CmdBorrar)
                    .addComponent(CmdModificar))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CmdCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdCrearActionPerformed
        //A TRAVÉS DE ESTE BOTÓN INSERTAREMOS EN LA BBDD
        Connection conexion = LeerFacturas.ConexionFacturas.obtenerConexion();
        insertarRegistro(conexion);

    }

    // Método para actualizar la tabla
    public void actualizarTabla(Connection conexion) {
        String query = "SELECT * FROM Login";
        try (PreparedStatement ps = conexion.prepareStatement(query); ResultSet rs = ps.executeQuery()) {

            // Establecer el modelo de la tabla y las columnas
            DefaultTableModel model = (DefaultTableModel) TableLogin.getModel();
            model.setRowCount(0);  // Limpiar la tabla antes de agregar los nuevos datos
            loginArray.clear();
            // Recorrer los resultados y agregar filas a la tabla
            while (rs.next()) {
                String login = rs.getString("Login");
                String clave = rs.getString("Clave");
                String rol = rs.getString("Rol");
                loginArray.add(login);
                model.addRow(new Object[]{login, clave, rol});

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al ejecutar la consulta SELECT", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();  // Para ver el error en consola
        }
    }

    // Método para insertar un nuevo registro
    public void insertarRegistro(Connection conexion) {
        String nombre = TxtLogin.getText();
        String clave = TxtClave.getText();
        String rol = CboRol.getSelectedItem().toString();
        boolean esValido = Validaciones.validarLogin(nombre, loginArray);
        String query = "INSERT INTO LOGIN (Login, Clave, Rol) VALUES (?,?,?)";
        if (!nombre.equals("") && !clave.equals("") && !rol.equals("") && esValido) {
            try (PreparedStatement ps = conexion.prepareStatement(query)) {
                // Establecer los valores de los parámetros
                ps.setString(1, TxtLogin.getText());
                ps.setString(2, TxtClave.getText());
                ps.setString(3, CboRol.getSelectedItem().toString());

                // Ejecutar la actualización (insertar datos)
                int filasAfectadas = ps.executeUpdate();
                if (filasAfectadas > 0) {
                    JOptionPane.showMessageDialog(this, "Registro insertado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    limpiarCampos();
                    actualizarTabla(conexion); // Actualizar la tabla después de insertar
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo insertar el registro", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException e) {
                // Si ocurre una excepción de SQL
                JOptionPane.showMessageDialog(this, "Error al insertar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();  // Para ver el error en consola
            }
        } else {
            JOptionPane.showMessageDialog(this, "NO HAS INSERTADO LO NECESARIO", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Método para limpiar los campos de texto
    private void limpiarCampos() {
        TxtLogin.setText("");
        TxtClave.setText("");
    }

    // Método que maneja la lógica principal
    private void manejarConexion() {
        // Obtener la conexión
        Connection conexion = LeerFacturas.ConexionFacturas.obtenerConexion();

        if (conexion != null) {
            // Primero, actualizamos la tabla
            actualizarTabla(conexion);

            // Luego, intentamos insertar el nuevo registro
            insertarRegistro(conexion);
        } else {
            // Si no se pudo establecer la conexión
            JOptionPane.showMessageDialog(this, "No se pudo establecer la conexión a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_CmdCrearActionPerformed

    private void CmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdNuevoActionPerformed
        TxtLogin.setText("");
        TxtClave.setText("");
        // Suponiendo que tienes una JTable llamada "TableLogin"

    }//GEN-LAST:event_CmdNuevoActionPerformed

    private void CmdBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdBorrarActionPerformed
        // Obtén la conexión a la base de datos
        Connection conexion = LeerFacturas.ConexionFacturas.obtenerConexion();

        // Obtén el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) TableLogin.getModel();

        // Obtén el índice de la fila seleccionada
        int selectedRow = TableLogin.getSelectedRow();

        if (selectedRow != -1) {  // Si hay una fila seleccionada
            // Obtener el valor que se usará para eliminar (por ejemplo, el idFactura)
            String Login = model.getValueAt(selectedRow, 0).toString();  // Asegúrate de que el índice de la columna sea correcto

            // Definir la consulta DELETE (usamos el idFactura para eliminar el registro)
            String queryBorrar = "DELETE FROM Login WHERE Login = ?";

            try {
                // Preparar la consulta
                PreparedStatement ps = conexion.prepareStatement(queryBorrar);

                // Establecer el valor para la consulta
                ps.setString(1, loginOriginal);

                // Ejecutar la consulta
                int rowsAffected = ps.executeUpdate();

                // Verificar si se eliminó algún registro
                if (rowsAffected > 0) {
                    // Si la eliminación fue exitosa, eliminar la fila de la tabla
                    model.removeRow(selectedRow);

                    JOptionPane.showMessageDialog(this, "Fila eliminada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el registro a eliminar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar el registro de la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si no hay fila seleccionada, mostrar un mensaje
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_CmdBorrarActionPerformed

    private void CmdModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdModificarActionPerformed
        // Obtén la conexión a la base de datos
        Connection conexion = LeerFacturas.ConexionFacturas.obtenerConexion();

        // Obtén el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) TableLogin.getModel();

        // Obtén el índice de la fila seleccionada
        int selectedRow = TableLogin.getSelectedRow();

        if (selectedRow != -1) {  // Si hay una fila seleccionada
            // Obtener el valor que se usará para eliminar (por ejemplo, el idFactura)
            String Login = model.getValueAt(selectedRow, 0).toString();  // Asegúrate de que el índice de la columna sea correcto

            // Definir la consulta DELETE (usamos el idFactura para eliminar el registro)
            String queryActualizar = "UPDATE Login SET Login = ?, Clave = ?, Rol = ? WHERE Login = ?";

            try {
                // Preparar la consulta
                PreparedStatement ps = conexion.prepareStatement(queryActualizar);

                // Establecer el valor para la consulta
                ps.setString(1, TxtLogin.getText());
                ps.setString(2, TxtClave.getText());
                ps.setString(3, CboRol.getSelectedItem().toString());
                ps.setString(4, loginOriginal);

                // Ejecutar la consulta
                int rowsAffected = ps.executeUpdate();

                // Verificar si se eliminó algún registro
                if (rowsAffected > 0) {
                    // Si la eliminación fue exitosa, eliminar la fila de la tabla
                    model.removeRow(selectedRow);

                    JOptionPane.showMessageDialog(this, "Fila Actualizada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    actualizarTabla(conexion);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el registro a actualizar", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al ACTUALIZAR LOGIN REPETIDO " + e.getMessage(), "Error NO SE PUEDE DUPLICAR LOGIN", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si no hay fila seleccionada, mostrar un mensaje
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para eliminar", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_CmdModificarActionPerformed

    private void BtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVolverActionPerformed
        //VENTANA PARA IR AL LOGIN (VUELVE A LA PÁGINA USUARIO Y SU PASSWORD)
        VentanaLogin ventana = new VentanaLogin();
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BtnVolverActionPerformed
    //SELECCIONAS Y COMPRUEBAS QUE EL LOGIN NO ESTA REPETIDO Y ASÍ LO SELECCIONAS DE LA TABLA
    private void seleccionarLogin() {
        ListSelectionModel model = TableLogin.getSelectionModel();
        model.addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                int filaSeleccionada = TableLogin.getSelectedRow();
                if (filaSeleccionada != -1) {
                    TxtLogin.setText(TableLogin.getValueAt(filaSeleccionada, 0).toString());
                    loginOriginal = TxtLogin.getText();
                    TxtClave.setText(TableLogin.getValueAt(filaSeleccionada, 1).toString());
                    String elementoCombo = TableLogin.getValueAt(filaSeleccionada, 2).toString();
                    for (int i = 0; i < CboRol.getItemCount(); i++) {
                        if (elementoCombo.equals(CboRol.getItemAt(i))) {
                            CboRol.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
        });
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaCRUDLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaCRUDLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaCRUDLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaCRUDLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnVolver;
    private javax.swing.JComboBox<String> CboRol;
    private javax.swing.JButton CmdBorrar;
    private javax.swing.JButton CmdCrear;
    private javax.swing.JButton CmdModificar;
    private javax.swing.JButton CmdNuevo;
    private javax.swing.JLabel LblContraseña;
    private javax.swing.JLabel LblLogin1;
    private javax.swing.JTable TableLogin;
    private javax.swing.JTextField TxtClave;
    private javax.swing.JTextField TxtLogin;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
